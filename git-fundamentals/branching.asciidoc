[#branching]
= Branching
:imagesdir: ./images/

= Activity: There's a branch for that!

Yay!! Branches!!

image::tree-branches.jpeg[]

Well not those branches...these branches:

image::git-flow.png[]

So far we've only really interacted with one branch, the default branch `master`. We've made at least one commit thus far and have seen how `git` basically keeps a running list of these change/commits in its `log`. 

At the highest level you can think of a `branch` generally as a reference to a given commit in a sequence of commits.

As we've seen `git` maintains a special reference called `HEAD` that points to the commit you're currently on (usually the most recent commit).

To create a new branch we leverage the `git branch <branch_name>` command.

Let's try it!

Before we do this let's get a fresh repository to play with.

1. Navigate back to the GitHub repository site for this course (https://github.com/willmadison/courses).
2. Using the GitHub web interface, `fork` this repository (this creates your own copy of the repo under your GitHub username/account so you can push, pull and branch to your heart's desire.)
3. Clone your newly ``fork``ed repository to a directory on your machine called `my-courses` (Hint: You can specify a folder name on clone like so `git clone <repo_url> <directory_name>`).
4. At this point you should have the original `courses` (Will's Copy) and your `my-courses` (which is a `fork` [fancy word for copy] of Will's `courses` repo).
5. Within your local `my-courses` folder let's take a look and see what branches are there. *Execute a `git branch` command*. (__Note: when we don't specify a branch name `git` just shows us a list of all of our local branches__).
6. Create a branch called `testing`. *Execute `git branch testing`*.
7. *View* all the branches and ensure that it's there.

Once we've done that here's what `git` does for us:

Here's a visual:

image::new-branch-layout.png[]

As we can see, `git` created a new branch for us called `testing` which points to the same commit we're currently on. But `HEAD` is still pointing to master. If we want to actually be on the new branch that we just created we actually have to `checkout` that branch (kinda like checking out a book from a library, can't take it home without checking it out from the `git` librarian). Let's `checkout` the `testing` branch:

1. Execute a `git checkout testing` command.
2. Look at the status of your working directory.

Once we `checkout` the newly created branch our `HEAD` references moves there like so:

image::new-branch-checkout.png[]

Now we can make changes, commit things that would only be recorded on the `testing` branch. This is an extremely useful capability for teams of software engineers. 

TIP: Checking out a newly created branch happens so often that there's a convenient short cut which will a) create the new branch and b) check it out all in one go! That shorthand command is `git checkout -b <branch_name>` (I use it almost exclusively).

= Activity: A day in the life!

Imagine you're working on a bug that takes you 2-3 days to resolve. You'd really like to make those changes and have a history without holding everyone else up waiting on your changes, that's a perfect situation for branches!

Branching is *CORE* to all `git` workflows. All meaningful work for most developers involves one (and often more) branch(es).

A typical workflow and day in the life of a developer goes like this:

1. Developer Judy is assigned or picks up the next highest priority issue on the teams backlog. Let's imagine that issue is a bug with 1234 as its identifier.
2. Developer Judy will `checkout` a new *feature branch* called `bugFix/1234`. (__Note: A *feature branch* is a [.underline]#short lived# branch that will contain all the necessary changes to build a given feature/fix.__)
3. Developer Judy fixes the bug and commits her changes to branch `bugFix/1234`, and pushes them up to the `origin` repository.
4. Developer Judy opens a pull request (often abbreviated PR) in her teams source control system (GitHub, GitLab, BitBucket, something like that...) Asking for her changes from the `bugFix/1234` branch into the bleeding edge `develop` branch. Which can be reviewed by someone else on their team for shared context and double checking.
5. Once that PR has been approved, Judy's changes will be incorporated (``merge``d) into the `develop` branch.

Let's squash a bug!

Scenario:

    You've just joined our team and immediately the Product Manager reports a bug that greetings on the web site aren't displaying correctly (Oh no!). Your Tech Lead Will (üëÄ) felt this would be a great first issue for you to take on! For this exercise, please reference this https://github.com/willmadison/courses/issues/1[GitHub Issue].

    The core engine that provides the greating capability can be found in the `exercises` folder of your `my-courses` repository. Your Tech Lead has informed you that there should be failing tests in place already to help you figure out what's going wrong.

    Please fix this in a feature branch and push that feature branch up to your remote repository when you're done.

__Note: This exercise can be completed in *Go*, *JavaScript*, *Java/Kotlin*, or *Python*. You only need to solve it in one of these languages not all.__

= Activity: Lane's ending...time to merge!

For this exercise we're going to open up our first pull request (PR). But first, we're going to play with remotes one last time.

When contributing to open source repositories, one of the first things you'll want to do is `fork` the source repository to your own copy, make your changes in a *feature branch* in your reposiory. `merge` those change into the `master` branch of your fork, then open up a pull request asking the original owner you forked from to `pull` in the fixes/changes you made.

While you're in the process of doing this there could be many other changes being made to the original source repository which is usually considered `upstream` from you. The convention then is for each fork to have an `upstream` branch that points to the original repository just in case there are changes made underneath you while you're making your changes.

Let's add an upstream to your local repo for Will's copy of `courses`.

1. Navigate to your `my-courses` repository locally.
2. Add Will's courses repository as a new `remote` using the following command `git remote add upstream <remote_url>` (Note: the remote url for Will's courses repository is https://github.com/willmadison/courses.git)
3. To ensure we have all the correct remotes, let's view them all (Hint: `git remote -v`)
4. Once you've done that let's look at all of the branches we have. Execute a `git branch -a` (This will display `all` (hence the `-a`) of the branches..even the remote ones!)
5. Remember that `git fetch` we did that appeared to not do anything, compare the branches that are reportedly available at the `upstream` remote with the branches in your local copy of Will's `courses` repository.

Awesome! Now we're set to do our first `merge`. Let's get to it!

``merge``-ing is necessary to bring divergent branches (like master and a feature branch with a new change on it) back into alignment with each other.

In order to merge you'll want to have the branch you want to merge *into* already checked out.

1. Let's merge our feature branch with the fixes we made into `master`.
2. Take a look at the history of your repo to see how it looks after the merge.
3. A this point that feature branch has served its purpose, let's delete it. Execute a `git branch -d <feature_branch_name>` (the `-d` is for `delete`).

= Activity: I'm feeling conflicted... üåö Ô∏è

The `merge` we just performed was pretty much a "fast forward" given that master hadn't really had any changes occur to it since that feature was developed these are relatively painless and very common for short lived feature branches (Opinion: all feature branches *should be* short lived.)

But, there are times where things don't necessarily go so smoothly to demonstrate this let's `pull` in some changes from our `upstream` `hotfixes` branch. 

When we did that, we should have seen some conflicts when `git` attempted to peform the merge, these are called *merge conflicts*.

== Demystifying a conflict

[source,bash]
----
<<<<<<< HEAD <1>
this represents the content currently present in the branch
you are merging into (we can tell because of the HEAD reference above).
=======
Below the equal signs is the content coming from the branch
you are merging from (in our case this is the upstream/hotfixes branch).
>>>>>>> upstream/hotfixes <2>
----
<1> This content is what is currently on the branch we have checked out
<2> The content below the `=======` is what's trying to be incorporated into this branch but is conflicting with what's already present.

== Resolving a conflict

Conflict resolution is more art than science and often involves working collaboratively with other team members to resolve and ensure there was no functionality mistakenly lost due to a botched conflict resolution.

In this case your teammate, me, says it's cool to just keep your version since it's simpler.

There are a number of ways to resolve merge conflicts, many IDEs have great tooling built into them that can show you a side by side comparision and give you controls like "Use Mine", "Use Theirs", "Use Both", etc.  

Today, so that we can have more control, and also because the conflict is so tiny, we'll resolve it by hand.

Conflict resolution involves a few steps:

1. Identify all conflicts by looking for the awkward `<<<< HEAD` merge conflict marker.
2. Decide what should be kept between the conflicted versions (__Note: Sometimes this is a blend of concepts or portions from both versions__).
3. Delete the merge conflict markers (i.e. the line(s) containing `<<< HEAD` `======` and the trailing `>>>>> branch_name`)
4. Once you are happy with the changes execute a `git add <conflicted_file_name>` to mark the conflict resolved. (__Note: This lets git know it's cool to merge and commit now__)
5. Optional: Execute a `git status` to see the state of your working directory.
6. Execute a `git commit` to finalize the merge.

Let's all resolve our merge conflicts now!

= Activity: Tag it and Bag it! üè∑Ô∏è

*Disclaimer: Tagging isn't necessarily something that all shops will do. But it's a great tool to have in your toolbox.*

== What is a tag?

- A `tag` in git is a lightweight reference (much like `HEAD`) to a particular commit in a given repository.
- ``tag``s are quite often used as release markers (like v1.0.0, v1.0.2, etc.)

=== Listing Tags

If we simply execute a `git tag` command, by default it will just list all of the existing `tag`s on the repository.

It's output should look something like this:

[source,bash]
----
$ git tag
v1.0.0
v1.0.5
releases/v2.0.0
releases/v2.0.1
----

=== Creating Tags

- Tags come in two variants: *lightweight* and *annotated*.
- *lightweight* tags are just that, very simple references to a given commit, no fuss.
- An *annotated* tag is a bit more like a formal branch it has information about who tagged and when with what message and can be signed/verified if you're into that sort of thing.
- Generally, best practice is to leverage *annotated* tags almost exclusively. 

To create an annotated tag simply execute the following command:

`git tag -a <tag_name> -m <tag_message>`

The `-a` here stands for annotated, `-m` for the tag's "message".

1. In your `my-courses` repository, create a new *annotated* tag called `prereleases/v1.0.0-alpha`

=== Pushing Tags to your remote repository

Pushing tags works very much like pushing a local branch to your remote repository. Doing so can be done like so:

`git push <remote_name> <tag_name>`

Now, this can be painful/repetitive if you have many many local tags. To push all tags you can also push all tags like so:

`git push <remote_name> --tags`

With that:

1. Push all of your local tags to your `origin` remote repository.

=== Deleting Tags

Deleting a tag is as simple as executing `git tag -d <tag_name>`

1. In your `my-courses` repository create a new *annotated* tag called `prereleases/delete-me`. 
2. View all tags.
3. Delete the `prereleases/delete-me` tag.

=== Brief aside, checkout out a tag and the detached `HEAD` state

Because *annotated* ``tag``s are like lightweight branches they can also be ``checkout``'d.

WARNING: Checking out a tag directly puts your working directory in a "detached HEAD" state. While in a detached HEAD state any commits you make will only be referencable by their commit hash as there's no branch to track them or keep up with them.

Let's try it!

1. Checkout your `prereleases/v1.0.0-alpha` tag (e.g. `git checkout <tag_name>`).
2. Observe the messaging when you checkout the tag directly.

A common use case for tags though is checking them out to fix any bugs that were in that release (when tags are used for release targets this is really really helpful). The best way to do this is to checkout a new branch using the tag as a reference point like so:

`git checkout <tag_name> -b <branch_name>`

This will give you a new branch with full branch-ability to make commits that will not be lost and can be used to create a new tag containing your fixes.

1. Checkout your `prereleases/v1.0.0-alpha` tag into a new branch called `hotfix/v1.0.1`.
2. Make any commit you'd like to make.
3. Take a look at the history to see the impact of this change. 
4. Merge your changes from the `hotfix/v1.0.1` branch into into `master`.
5. Create a new tag from master called `prereleases/v1.0.1-alpha`.
6. Push your tags to your remote repository.


= Activity: What are the cool kids doing (Branch management strategies)! üòé

When it comes to managing `git` workflows there are so many different ways you can do this. Two of the most prevalent are: *Trunk Based Development* and *Git Flow* (and *GitFlow Derivatives*).

== Trunk Based Development

image::trunk-based.png[]

image::trunk-based-scaled.png[]

== Git Flow

image::git-flow.png[]

== GitHub Flow

https://guides.github.com/introduction/flow/

== GitLab Flow

https://docs.gitlab.com/ee/topics/gitlab_flow.html

== Others?