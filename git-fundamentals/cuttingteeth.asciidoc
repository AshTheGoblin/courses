[#cuttingteeth]
= Cutting Our Teeth

> "Let's get it started! Ha!" - The Black Eyed Peas

= Activity: Git the Bag (ehh Code)

Before we can do anything productive in our team's code base we'll need to git (pun intended) the code :).

In order to do that the `git` command we'll rely on is `git clone`. 

Cloning a repository brings down the full repository in all its glory down to your local machine with its full history.

The format for a git clone is like so: `git clone <git repository URL>`

Let's try it!

In this exercise we're going to clone two repositories/projects down to your machine.

1. Open a terminal on your machine and navigate to a folder on your machine that will hold your local copies of the code (__I often like to use a folder like ~/git/github or c:\Users\will\git\github__).

2. Clone your newly created repository down to your machine. (Tip: the url you'll need can be found on GitHub in the highlighted location below.)

3. Clone the repository (https://github.com/willmadison/courses.git) for this presentation down to your machine. (Tip: This will be great for following along!)

4. To confirm that everything cloned correctly navigate back to the location we started out in Step 0 and ensure you see two folders there one for each of the repositories we just cloned.

= Activity: What's the 411? 

One of the commands you'll find yourself running quite often to understand the state of things is `git status`. `git status`
interrogates your local copy of the repository and informs you of what state you're currently in (i.e. what have you modified (if anything), etc.)

1. Try it! Execute `git status` and take a look at the output.

`git status` should return output similar to this:

[source,bash]
----
On branch master <1>
Your branch is up to date with 'origin/master'. <2>

nothing to commit, working tree clean <3>
----
<1> Most useful work in git happens on a branch (think of a branch as a timeline/stream of changes taken place to the code). `master` is the default branch every repo comes with but there can be many!
<2> As we noted previously, git is a Distributed SCM `origin` is the internal name of the remote repository location from which we initially cloned.
<3> "working tree" generally refers to this local working copy in this directory. It's clean when we haven't made any changes (yet).

In addition to understanding the current state of things, it's often also very handy to understand what has taken place so far.

To do that, we rely on a command called `git log`. `git log` shows us the full history (if we care to scroll) of the changes 
made to the repository.

Let's Try It!

1. First, navigate to directory that contains this course's documents.
2. Once you're there execute a `git log` command.
3. The output should look something like this:

[source,bash]
----
commit 46c087dd6e1ca5bcc23203edb7a749990dab6d13 (HEAD -> master, origin/master, origin/HEAD) <1>
Author: Will Madison <wmadisondev@gmail.com> <2>
Date:   Thu May 7 03:43:30 2020 +0000 <3>

    one more formatting tweak <4>

commit 009007457f57ea3d45769551cdd81eba3b7e548a
Author: Will Madison <wmadisondev@gmail.com>
Date:   Thu May 7 03:41:49 2020 +0000

    fixing some typos and tweaking some formatting

commit 64c7eeb8122e0160d338487f9473b5fc40b06067
:
----
<1> Every change made in a git repository happens by ``commit``ing the change to the repository's history. Each commit get assigned a long identifier called a `commit hash` (thankfully when we need this we typically only need the first handful of characters).
<2> Who made this change?
<3> When was this change made?
<4> What did the person say when they made this change? (This is also called the `commit` "message")

== Review: Anatomy of a git repository

Let's take a brief look at one of our local repositories.

1. Navigate back to your `toc-foundations-notes` repository location.
2. Take a look at the files there [this can be done by running these commands `ls -Flah` (Mac/Linux) or `dir` (Windows)]

The directory should look like this:

[source,bash]
----
total 24K
drwxrwxr-x 4 ubuntu ubuntu 4.0K May  7 00:07 ./
drwxr-xr-x 5 ubuntu ubuntu 4.0K May  7 00:07 ../
drwxrwxr-x 8 ubuntu ubuntu 4.0K May  7 04:49 .git/ <1>
-rw-rw-r-- 1 ubuntu ubuntu 1.1K May  7 00:07 LICENSE
-rw-rw-r-- 1 ubuntu ubuntu   66 May  7 00:07 README.md
-rw-rw-r-- 1 ubuntu ubuntu  296 Aug 12  2019 .gitignore <2>
----
<1> This directory is a special directory git uses internally to keep track of what's changed in its "index" (think of it like filing cabinet of all the stuff in the repo and what's happened to it)
<2> The .gitignore file is a special file that can instruct git to safely ignore certain files/directories, etc. in your repo.

= Activity: Maybe change isn't so hard? 

Now, let's change something!

1. In your `toc-foundations-notes` repository, create a new directory called `git-fundamentals`.
2. Inside of your newly directory create a new file: `scratchpad.md`.
3. Using your favorite text editor, open `scratchpad.md`.
4. At the top of your scratchpad enter the following text: "# This is my scratchpad, there are many like it but this one is mine..." (without quotes)
5. Save your changes.
6. Back in your terminal, interrogate the status of things after your change. What do you see?

As you interrogate what changed you should see output similar to this:

[source,bash]
----
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files: <1>
  (use "git add <file>..." to include in what will be committed)

        git-fundamentals/scratchpad.md
----
<1> When something is untracked, that basically means `git` has no record of this items history (i.e. it's brand new)
