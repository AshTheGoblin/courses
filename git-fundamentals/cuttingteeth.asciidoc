[#cuttingteeth]
= Cutting Our Teeth
:imagesdir: ./images/

> "Let's get it started! Ha!" - The Black Eyed Peas

= Activity: Git the Bag (ehh Code)

Before we can do anything productive in our team's code base we'll need to git (pun intended) the code :).

In order to do that, the `git` command we'll rely on is `git clone`. 

Cloning a repository brings down the full repository in all its glory down to your local machine with its full history.

The format for a git clone is like so: `git clone <git repository URL>`

Let's try it!

In this exercise we're going to clone two repositories/projects down to your machine.

1. Open a terminal on your machine and navigate to a folder on your machine that will hold your local copies of the code (__I often like to use a folder like ~/git/github or c:\Users\will\git\github__).

2. Clone your newly created repository down to your machine. (Tip: the url you'll need can be found on GitHub in the highlighted location below.)

3. Clone the repository (https://github.com/willmadison/courses.git) for this presentation down to your machine. (Tip: This will be great for following along!)

4. To confirm that everything cloned correctly navigate back to the location we started out in Step 1 and ensure you see two folders there one for each of the repositories we just cloned.

image::clone-url-location.png[]

= Activity: What's the 411? 

One of the commands you'll find yourself running quite often to understand the state of things is `git status`. `git status`
interrogates your local copy of the repository and informs you of what state you're currently in (i.e. what have you modified (if anything), etc.)

Let's Try it!

1. Navigate to the folder containing your `toc-foundations-notes` repository.
2. Execute `git status` and take a look at the output.

`git status` should return output similar to this:

[source,bash]
----
On branch master <1>
Your branch is up to date with 'origin/master'. <2>

nothing to commit, working tree clean <3>
----
<1> Most useful work in git happens on a branch (think of a branch as a timeline/stream of changes taken place to the code). `master` is the default branch every repo comes with but there can be many!
<2> As we noted previously, git is a Distributed SCM `origin` is the internal name of the remote repository location from which we initially cloned.
<3> "working tree" generally refers to this local working copy in this directory. It's clean when we haven't made any changes (yet).

In addition to understanding the current state of things, it's often also very handy to understand what has taken place so far.

To do that, we rely on a command called `git log`. `git log` shows us the full history (if we care to scroll) of the changes 
made to the repository.

Let's Try It!

1. First, navigate to directory that contains this course's documents.
2. Once you're there execute a `git log` command.
3. The output should look something like this:

[source,bash]
----
commit 46c087dd6e1ca5bcc23203edb7a749990dab6d13 (HEAD -> master, origin/master, origin/HEAD) <1>
Author: Will Madison <wmadisondev@gmail.com> <2>
Date:   Thu May 7 03:43:30 2020 +0000 <3>

    one more formatting tweak <4>

commit 009007457f57ea3d45769551cdd81eba3b7e548a
Author: Will Madison <wmadisondev@gmail.com>
Date:   Thu May 7 03:41:49 2020 +0000

    fixing some typos and tweaking some formatting

commit 64c7eeb8122e0160d338487f9473b5fc40b06067
:
----
<1> Every change made in a git repository happens by ``commit``ing the change to the repository's history. Each commit get assigned a long identifier called a `commit hash` (thankfully when we need this we typically only need the first handful of characters).
<2> Who made this change?
<3> When was this change made?
<4> What did the person say when they made this change? (This is also called the `commit` "message")

== Review: Anatomy of a git repository

Let's take a brief look at one of our local repositories.

1. Navigate back to your `toc-foundations-notes` repository location.
2. Take a look at the files there [this can be done by running these commands `ls -Flah` (Mac/Linux) or `dir` (Windows)]

The directory should look like this:

[source,bash]
----
total 24K
drwxrwxr-x 4 ubuntu ubuntu 4.0K May  7 00:07 ./
drwxr-xr-x 5 ubuntu ubuntu 4.0K May  7 00:07 ../
drwxrwxr-x 8 ubuntu ubuntu 4.0K May  7 04:49 .git/ <1>
-rw-rw-r-- 1 ubuntu ubuntu 1.1K May  7 00:07 LICENSE
-rw-rw-r-- 1 ubuntu ubuntu   66 May  7 00:07 README.md
-rw-rw-r-- 1 ubuntu ubuntu  296 Aug 12  2019 .gitignore <2>
----
<1> This directory is a special directory git uses internally to keep track of what's changed in its "index" (think of it like filing cabinet of all the stuff in the repo and what's happened to it)
<2> The .gitignore file is a special file that can instruct git to safely ignore certain files/directories, etc. in your repo.

= Activity: Maybe change isn't so hard? 

Now, let's change something!

1. In your `toc-foundations-notes` repository, create a new directory called `git-fundamentals`.
2. Inside of your newly directory create a new file: `scratchpad.md`.
3. Using your favorite text editor, open `scratchpad.md`.
4. At the top of your scratchpad enter the following text: "# This is my scratchpad, there are many like it but this one is mine..." (without quotes)
5. Save your changes.
6. Back in your terminal, interrogate the status of things after your change. What do you see?

As you interrogate what changed you should see output similar to this:

[source,bash]
----
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files: <1>
  (use "git add <file>..." to include in what will be committed)

        git-fundamentals/scratchpad.md
----
<1> When something is untracked, that basically means `git` has no record of this item's history (i.e. it's unversioned by git).

= Activity: We on Deck!

> "We next. You like baseball? We on deck." - Eddie Murphy (as Rayford Gibson) in Life 

So far we've made a change locally and we can see that something changed but, because `git` has no knowledge of this file's history it can't actually tell us 
what exactly changed in that untracked file.

Let's `add` this item to ``git``'s tracking mechanism.

To do that, we leverage the `add` command.

``add``ing an item in `git` "stages" that item to be included in the set of changes that gets committed to ``git``'s
log of the historical changes that have taken place.

1. Execute `git add git-fundamentals/scratchpad.md` from your `toc-foundations-notes` repository.
2. Then, interrogate the status of your changes in the repository.

Once you do, you should see something like this:

[source,bash]
----
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage) <1>

        new file:   git-fundamentals/scratchpad.md
----
<1> When something is "added" in git it becomes "staged". Which means that this change will be included the next time we're ready to `commit` the changes we've made to git history permanently.

__Note: There are some developers who favor adding items in this style `git add .` which basically says add everything in this current directory. I prefer to be more explicit as adding "dot" could unintentionally stage something you didn't intend to stage.__

= Activity: What's the difference?!

So far, we can see that changes have been made and are going to be committed but, what's actually changed?

Well, as this is a question that developers will often ask, `git` has a built in mechanism to determine what changes have taken place: `git diff`.

Let's try it out!

Execute `git diff --staged` in your terminal to see a picture of what has been modified in your working tree/directory.

You should see output similar to this:

[source,bash]
----
diff --git a/git-fundamentals/scratchpad.md b/git-fundamentals/scratchpad.md
new file mode 100644
index 0000000..a81a99f
--- /dev/null <1>
+++ b/git-fundamentals/scratchpad.md <2>
@@ -0,0 +1 @@
+# This is my scratchpad, there are many like it but this one is mine... <3>
----
__Note: This view is called a "unified" or "inline" diff. Which shows us the difference between what we have and what was already there. __
<1> This line indicates that this file was never there before.
<2> Indicates that this is the incoming modification.
<3> What was actually added. (The leading `+` at the front of the line indicates an addition, a leading `-` indicates a removal).

= Activity: Make it last forever ðŸŽ¶

> "It is time..." - Rafiki (The Lion King)

Now, let's make this change final!

We've alluded to this quite a bit already but in order for a change to really count permanently it has to be ``commit``ed.

You can think of committing just like you would think of "committing something to memory". It's often the final
step after you're satisfied with the code you've written.

__Note: I sometimes am a bit obsessive about checking the status prior to committing to make sure that only things I intended to commit are being committed.__

1. Navigate to your `toc-foundations-notes` directory.
2. Optional: Interrogate the status of your working directory/tree.
3. Execute `git commit`.

__Note: When you do this by default git will attempt to open a text editor (usually something that feels like Vim a popular light weight editor common on Unix/Linux systems).__

TIP: In order to write a commit message using this vim-like editor type the letter `i` to enter "insert mode" (basically the mode most commonly used text editors are in by default). Type your message, then hit the `esc` key to go back into "command mode". Once you're happy with the message while in command mode, type in `:wq` (which means write (save) and quit) to exit the editor.

TIP: Going forward if your commit message is relatively short, you can use the inline syntax to avoid getting trapped in an editor: `git commit -m "Your message here..."`.

TIP: There's also a form that will automatically `add` changes to currently tracked files at commit time while you're supplying a message like so: `git commit -am "Your message here..."`. This can save a lot of repetitive `git add` calls :).

= Activity: Oh my bad...ðŸ¤¦ (undoing local changes)

So this is all fine and well, but what if you make a mistake locally?

Let's see what we can do.

1. Navigate to your `toc-foundations-notes` directory.
2. Open your `scratchpad.md` file.
3. Add in the following text (without quotes): "#Thsi was SUCH a mistake :( [sic]"
4. Ensure that git sees the correct differences.

__Note: He're we're deliberately making this mistake but, being that we're all human it's entirely possible that this kind of "fat-finger" error can happen in real life :)__

Now, we have made an erroneous change. What can we do? `git reset` to the rescue!

1. Execute `git reset --hard HEAD`.
2. Interrogate the status of your working directory.

__Note: HEAD is a special reference to the most recently commited change in the branch that we're currently working. If you look at `git log` you can see where HEAD (both local and remote HEADs) is currently.__ 

When resetting you can actually reset to any previous commit if you want `HEAD` is just the most commonly used commit for resetting purposes. We'll cover randomly resetting to other places later today.

= Activity: To the Mothership

So far we've only talked briefly about the notion of remote repositories and their use. Let's look at them a bit more deeply.

`git` includes a `git remote` subcommand which allows us to administer and view all of the remotes associated with our repository.

Let's take it for a spin.

1. Execute `git remote -v` from your `toc-foundations-notes` repository.

You should see something like this:

[source,bash]
----
origin  git@github.com:willmadison/courses.git (fetch)
origin  git@github.com:willmadison/courses.git (push)
----

Here we can see that each origin is delineated by which one can be used for ``push``ing (or ``fetch``ing [which we'll get to here soon]) and has a name. In this case
the only remote we have is the one we started with `origin` but, you can have as many as your heart desires (that's what makes `git` distributed).

= Activity: Behind the times... (Getting the latest code)

So we've made local changes and ``push``ed them up to our remote repository for safe keeping. But, how would we get updates from our remote repositories if someone else made a change other than us?

Well, there are a couple of ways to sync your local repository with one (or more) of your remote repositories, let's talk about each.

== Fetching

`git` provides a mechanism that allows us to synchronize our local references with their respective remotes in a non destructive way. To do that we can execute a `git fetch <remote_name>` command. This will pull in all the information that exists on remote that we don't have yet but won't force us to integrate those changes into what we're currently working on and we can do so at a later time.

== Pulling

If indeed we do want to immediately integrate any remote changes into what we're currently working on `git` can do that too!. To accomplish this immediate integration of new data we can execute a `git pull <remote_name> <branch_name>`. `git pull` logically performs a `fetch` (getting all the latest info) followed by a `merge` (integration of that new information with what you currently have, don't worry we're cover this right after lunch!) 

Note: If you omit the remote name and branch name AND the branch you're currently working on is setup to track (synchronize with) a remote branch of the same name, `git pull` will automatically leverage origin/branch_name as the source of new information when you execute a pull command. 

Enough talking! Let's try them out!

1. Navigate to directory that contains this course's documents (I've been making changes while we've been talking).
2. Once you're there execute a `git pull origin master` command.
3. Take a look at the history (__Hint: ``git``'s log may be a good place to start__) to see what changed.
4. Optional: If you really want to do a deep dive of a given commit to see what changed you can leverage the `git show <commit_hash>` command.

Let's take ``fetch``ing for a spin!

1. Navigate to directory that contains this course's documents.
2. Once you're there execute a `git fetch origin` command.

__Note: It may look like nothing happened...that's ok! We'll take a deeper look right after the break! Let's get some food!!!__